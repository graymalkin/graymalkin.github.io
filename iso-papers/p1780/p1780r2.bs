<pre class='metadata'>
Title: Modular Relaxed Dependencies: A new approach to the Out-Of-Thin-Air Problem
Shortname: P1780
Revision: 2
Audience: SG1
Status: D
Group: WG21
URL: http://wg21.link/P1780r2
Editor: Mark Batty, University of Kent, M.J.Batty@kent.ac.uk
Editor: Simon Cooksey, University of Kent, simon@graymalk.in
Editor: Scott Owens, University of Kent, S.A.Owens@kent.ac.uk
Editor: Anouk Paradis, Ecole Polytechnique, anouk.paradis@polytechnique.edu
Editor: Marco Paviotti, University of Kent, M.Paviotti@kent.ac.uk
Editor: Daniel Wright, University of Kent, daw29@kent.ac.uk
Abstract: This note describes an alteration of the existing concurrency specification that allows compiler optimisations while forbidding thin-air values. It is a pleasingly small change that introduces a semantic dependency relation, tracking program dependencies that must not be removed by compiler optimisation. The rest of the existing concurrency definition remains largely unaltered. There are two proposals for the calculation of semantic dependency, together with a logic that shows this approach recovers the -- currently broken -- ability to formally verify concurrent code. We present the context, the ideas behind the change, reference the academic work supporting this approach,  and the textual changes required to the standard.
Date: 2022-11-07
Markup Shorthands: markdown yes
</pre>

<style type="text/css">
  .math {
    background-color: hsl(266, 67%, 98%);
    padding: 0.3em;
    border-radius: 0.3em;
  }

  .title {
    font-weight: bold;
    padding: 0em 0.5em 0em 0.2em 0em;
  }
  
  .title + p {
  margin-top: 0em;
  }

  .litmus-title  {
    font-weight: bold;
    background-color: hsl(24, 20%, 95%);
    padding: 0.5em 0em 0.2em 1em;
  }

  .litmus-title + .highlight {
    margin-top: 0;
    padding-top: 0;
  }
  
  ol li ol {
    list-style-type: lower-alpha;
  }
  
  ol li ol li ol {
    list-style-type: lower-roman;
  }
  
  ol li ol li ol li ol {
    list-style-type: upper-alpha;
  }

  .rm {
  text-decoration: line-through;
  color: #960c02;
  font-family: serif, 'Times New Roman';
  }
  
  .new {
  color: #001f96;
    font-family: serif, 'Times New Roman';
  }
  
  .heading2 {
  font: 120% serif;
  font-weight: bold;
    line-height: 1.2;
  }
  
  .heading2:before {
  content: attr(hdg);
  margin-right: 2em;
  }
  
  .heading3 {
  font: 110% serif;
  font-weight: bold;
    line-height: 1.2;
  }
  
  .heading3:before {
  content: attr(hdg);
  margin-right: 2em;
  }
  
  .clause:before {
  content: attr(cls);
  font-size: 90%;
  text-align: right;
  margin-left: -2em;
  }
  
  .clause > p:first-of-type {
  margin-left: 1em;
  display: inline;
  }
  
  .clause {
  margin-top: 1em;
  margin-bottom: 1em;
  }
  
  .in-box {
  border: solid #555 2px;
  background-color: #eeeeee;
  padding: 0.5em;
  }
</style>

Changelog {#changelog}
=========

Revision 0 (Cologne June 2019) {#rev0}
------------------------------
 - Original paper. 

Revision 1 (Belfast October 2019) {#rev1}
---------------------------------
 - Draft wording to incorporate an algorithm which calculates semantic dependency.

Revision 2 (Kona November 2022) {#rev2}
-------------------------------
 - Draft wording which introduces semantic dependency as implementation defined.

Recap: The out-of-thin-air problem {#recap}
==================================

From its introduction in 2011, the C++ concurrency model has faced a great deal of scrutiny, leading to various refinements of the standard.
[[P0668R5]] Revising the C++ Memory Model, describes changes needed to incorporate the fixes of [[RC11]], the latest revision of the existing C++ concurrency design, solving most known problems.

This process of scrutiny and refinement has produced a mature model, but it has also uncovered major problems.
The out-of-thin-air problem, discussed most recently in [[P1217R1]] allows unintuitive and unobservable behaviours and makes reasoning formally about the correctness of concurrent code impossible. The thin air problem does not yet have a convenient solution: existing solutions -- like the Promising Semantics [[Promising]] -- discard the mature concurrency model of the standard and start afresh with a different paradigm.
Implementing such a change would require a wide-ranging rewrite of the standard.

The out-of-thin-air problem arises from an under-specification of which program dependencies ought to order memory accesses.
The trouble is neatly explained by example.

<div class="litmus-title">LB</div>
```c++
// Thread 1
r1 = x.load(memory_order::relaxed);
y.store(1, memory_order::relaxed);

// Thread 2
r2 = y.load(memory_order::relaxed);
x.store(1, memory_order::relaxed);
```

In the example above, called Load Buffering (LB), C++ allows the execution where `r1` and `r2` have value 1 at the end of execution.
This outcome must be allowed to permit efficient compilation of relaxed accesses to plain loads and stores on the Power and ARM architectures, where the corresponding behaviour is allowed.

<div class="litmus-title">LB+datas (P1217R1 OOTA Example 1, JCTC4)</div>
```c++
// Thread 1
r1 = x.load(memory_order::relaxed);
y.store(r1, memory_order::relaxed);

// Thread 2
r2 = y.load(memory_order::relaxed);
x.store(r1, memory_order::relaxed);
```

In the example above, taken from [[P1217R1]], there are now data dependencies from load to store and no explicit write of any value.
Surprisingly, the outcome 42 is allowed by the C++ standard -- we say that the value 42 is conjured from *thin-air*.

<div class="litmus-title">LB+ctrls (P1217R1 OOTA Example 2, JCTC13)</div>
```c++
// Thread 1
r1 = x.load(memory_order::relaxed);
if(r1 == 42) {
  y.store(42, memory_order::relaxed);
}

// Thread 2
r2 = y.load(memory_order::relaxed);
if(r2 == 42) {
  x.store(42, memory_order::relaxed);
}
```

A similar behaviour can be exhibited using control dependencies, as above.
The thin-air outcomes of LB+datas and LB+ctrls are the result of a design choice that aims to permit compiler optimisation: some optimisations remove syntactic dependencies, so if C++ bestows ordering to no dependencies, the compiler is free to remove what it likes.

<div class="litmus-title">LB+false+ctrl (JCTC6)</div>
```c++
// Thread 1
r1 = x.load(memory_order::relaxed);
if(r1 == 42) {
  y.store(42, memory_order::relaxed);
} else {
  y.store(42, memory_order::relaxed);
}

// Thread 2
r2 = y.load(memory_order::relaxed);
if(r2 == 42) {
  x.store(42, memory_order::relaxed);
}
```

In Thread 1 above, a compiler may spot that, whatever value is read, the write will be made regardless, optimising to the program below, and allowing both threads to read 42:

```c++
// Thread 1
r1 = x.load(memory_order::relaxed);
y.store(42, memory_order::relaxed);
```

As it stands, the standard allows both threads to read 42 and hence it permits the optimisation, but it also allows the thin-air outcomes in LB+datas and LB+ctrls.
[[P1217R1]] explains that these outcomes cannot occur in practice and must be forbidden to enable reasoning and formal verification.

Our Solution {#solution}
============

[[P0422R0]] highlights a series of litmus tests, borrowed from Java, that constrain the ideal behaviour of an improved semantics (e.g. JCTC4, JCTC13 and JCTC6 above).
The paper makes the observation that the thin-air execution of each test features a cycle in ([RF] &cup; [SDEP]) where [SDEP], *semantic dependency*, is an as yet undefined relation that captures only the real dependencies that the compiler will leave in place.
If only we forbid cycles in ([RF] &cup; [SDEP]), then the model would have the behaviour we desire.

[[P1217R1]] highlights a simple way to guarantee a lack of thin-air behaviour: forbid the reordering of relaxed loads with following stores.
This is equivalent to forbidding cycles in ([RF] &cup; [SB]), and is sufficient to avoid cycles in ([RF] &cup; [SDEP]).
This approach is controversial because it may have a substantial overhead, especially on GPUs.

We have worked as academics on building a definition for [SDEP] which can be calculated over an input program.
We have found two such approaches, one presented in an earlier version of this paper, and in academic literature as [[MRD]], and another in the academic literature which uses a different approach to build [SDEP] [[PWT]].
These models are complex and by no means industrially verified, but it leads us to agree with [[P0422R0]] and propose a standard wording change which incorporates an idea of [SDEP].
In further work, we adapted established concurrent reasoning techiques (Hoare triples with Owicki-Gries global invariants) to work above the C++ model with [SDEP], establishing that this approach once again enables one to prove C++ code correct [[owicki-gries]].

The standard describes the three stages of working out the concurrent behaviour of a program:

 1. Generate a list of pre-executions from the source of a program, each corresponding to an arbitrary choice of read values.
  
 2. Pair each pre-execution with reads-from and modification order relations that capture the dynamic memory behaviour of the program, and filter, keeping those that are *consistent* with the rules of the memory model.
 
 3. Finally, check for races: race free programs have the consistent executions calculated in step 2, racy programs have undefined behaviour.

We augment this scheme by parameterising [SDEP] in step 1, and by providing a technical note on constraints which a good C++ implementation should put on [SDEP]&mdash;for example, forbidding the out-of-thin-air execution by always including [SDEP] edges in JCTC4.

This approach is distinct from [[Promising]] and other suggested academic models, because nearly all of the existing wording on memory consitency can be preserved.
It also is certainly compatible with existing implementations, as constraints to place on the "shape" of [SDEP] would be provided in a technical note, which can be written with taste for current implementations of C++.


Conclusion {#conclusion}
==========

<!--
MRD is one possible solution to the thin-air problem. Its machinery is *orthogonal* to the conditions of the existing
memory model, and as a consequence, it is implemented within the standard in a localised and self-contained
way. Moreover, all of the refinements made to the current standard are carried over. MRDer makes it clear that MRD
can be evaluated efficiently, and enables us to quickly answer questions about how it behaves.

We believe MRDC hits quite a few desirable properties for a revision of the C++ concurrency model:
 - continued support of `ld;st` re-ordering,
 - reasoning about programs with RFUB behaviour,
 - implementability at no additional cost on major architectures (ARM, POWER, x86, RISC-V),
 - augmentation of RC11, incorporating all known fixes to C++ concurrency,
 - extension, rather than re-creation, of the existing standard,
 - potential route to redefining `memory_order::consume` using semantic dependency, and
 - application to other memory models with an *axiomatic* representation, e.g. Java, Linux and OpenCL.
 - -->

We have found several possible solutions in academic literature to the thin-air problem, but none look like they can be plucked and placed into the standard without considerable re-writes of the existing memory model text.
We consider this to be undesirable, and propose a fix as was originally suggested in [[P0422R0]], but with the added knowledge that [SDEP] *can* be calculated and used for reasoning.
This aproach has several benefits:

- continued support of `ld;st` re-ordering,
- reasoning about programs with RFUB behaviour,
- no additional implementation cost on major architectures,
- extension rather than re-creation of the existing standard,
- the extensionis compatible with the latest refinements to the standard, not just with the C++11 wording,
- potential route to redefining `memory_order::consume` using semantic dependency.


Proposed Standard Change {#proposal}
========================

[...]

<div class="heading2" hdg="6.8.2">Multi-threaded executions and data races</div>

[...]

<div class="new">
<span class="heading3" hdg="6.8.2.2" id="6.8.2.2">Thin-air restriction</span>

<div class="clause" cls="1">

Some side effects are *semantically dependent* on evaluation operations.
An evaluation A is *causally before* an evaluation B if:
 - A is a side effect on an atomic object M, and B is an evaluation of M that takes its value, or
 - A is semantically dependent on B, or
 - for some operation X, A is causally before X and X is causally before B.

The implementation shall ensure that no program execution demonstrates a cycle in the causally before relation.

[*Note*: Semantic dependency is implementation defined, TRxxxx gives a specification on precisely what semantic dependencies should be preserved by an implementation. &mdash;*end note*]

</div>
</div>


[...]

<div class="heading2" hdg="30.4">Order and consistency</div>
[...]

<div class="rm clause" cls="8">

Implementations should ensure that no “out-of-thin-air” values are computed that circularly depend on their
own computation.

[*Note*: For example, with x and y initially zero,

```
// Thread 1:
r1 = y.load(memory_order::relaxed);
x.store(r1, memory_order::relaxed);
// Thread 2:
r2 = x.load(memory_order::relaxed);
y.store(r2, memory_order::relaxed);
```
  
should not produce r1 == r2 == 42, since the store of 42 to y is only possible if the store to x stores 42,
which circularly depends on the store to y storing 42. Note that without this restriction, such an execution is
possible.
</div>


<div class="rm clause" cls="9">

[*Note*: The recommendation similarly disallows r1 == r2 == 42 in the following example, with x and y again initially
  zero:

```
// Thread 1:
r1 = x.load(memory_order::relaxed);
if (r1 == 42) y.store(42, memory_order::relaxed);
// Thread 2:
r2 = y.load(memory_order::relaxed);
if (r2 == 42) x.store(42, memory_order::relaxed);
```

&mdash; *end note*]
</div>

[...]
  
<pre class='metadata'>
Text Macro: DEP <span class="rel dep">dep</span>
Text Macro: HB <span class="rel hb">hb</span>
Text Macro: MO <span class="rel mo">mo</span>
Text Macro: RF <span class="rel rf">rf</span>
Text Macro: SB <span class="rel sb">sb</span>
Text Macro: SDEP <span class="rel sdep">sdep</span>
Text Macro: SW <span class="rel sw">sw</span>
</pre>
<style>
  .rel {
    font-family: sans-serif;
    font-style: normal;
  }
  .dep { color: #920000; }
  .hb { color: forestgreen; }
  .mo { color: blue; }
  .rf { color: red; }
  .sb { color: black; }
  .sdep { color: #ff8306; }
  .sw { color: rgb(139, 10, 80); }
</style>
